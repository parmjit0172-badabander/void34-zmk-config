/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>

#include <dt-bindings/zmk/ext_power.h>

#define _ &kp
#define ___ &none
#define ______ &trans

#define DEF 0
#define NAV 1
#define NUM 2

#define NSPC LC(LG(RIGHT))
#define PSPC LC(LG(LEFT))

&sk {
        release-after-ms = <60000>;
};

/ {
    macros {
        lc: mo_layer_switch_with_an_embeded_cancel_tap_for_clearing_any_queued_sticky_mods_on_press {
            label = "LAYER_CANCEL";
            compatible = "zmk,behavior-macro-one-param";
            wait-ms = <0>;
            tap-ms = <0>;
            #binding-cells = <1>;
            bindings =
                <&macro_tap &kp K_CANCEL &macro_param_1to1>,
                <&macro_press &mo MACRO_PLACEHOLDER>,
                <&macro_pause_for_release>,
                <&macro_param_1to1>,
                <&macro_release>,
                <&mo MACRO_PLACEHOLDER>;
        };
    };

    combos {
        compatible = "zmk,combos";

        combo_r0c0c1 {
            key-positions = <0 1>;
            bindings = <_ N6>;
            layers = <0>;
        };
        combo_r0c1c2 {
            key-positions = <1 2>;
            bindings = <_ UNDER>;
            layers = <0>;
        };
        combo_r0c2c3 {
            key-positions = <2 3>;
            bindings = <_ N9>;
            layers = <0>;
        };

        combo_r1c0c1 {
            key-positions = <10 11>;
            bindings = <_ N1>;
            layers = <0>;
        };
        combo_r1c1c2 {
            key-positions = <11 12>;
            bindings = <_ MINUS>;
            layers = <0>;
        };
        combo_r1c2c3 {
            key-positions = <12 13>;
            bindings = <_ LBKT>;
            layers = <0>;
        };

        combo_r2c0c1 {
            key-positions = <20 21>;
            bindings = <_ N2>;
            layers = <0>;
        };
        combo_r2c1c2 {
            key-positions = <21 22>;
            bindings = <_ N3>;
            layers = <0>;
        };
        combo_r2c2c3 {
            key-positions = <22 23>;
            bindings = <_ LBRC>;
            layers = <0>;
        };

        combo_c1r0r1 {
            key-positions = <1 11>;
            bindings = <_ RA(M)>;
            layers = <0>;
        };
        combo_c2r0r1 {
            key-positions = <2 12>;
            bindings = <_ RA(T)>;
            layers = <0>;
        };
        combo_c3r0r1 {
            key-positions = <3 13>;
            bindings = <_ RA(L)>;
            layers = <0>;
        };
        combo_c4r0r1 {
            key-positions = <4 14>;
            bindings = <_ B>;
            layers = <0>;
        };

        combo_c1r1r2 {
            key-positions = <11 21>;
            bindings = <_ RA(GRAVE)>;
            layers = <0>;
        };
        combo_c2r1r2 {
            key-positions = <12 22>;
            bindings = <_ GRAVE>;
            layers = <0>;
        };
        combo_c3r1r2 {
            key-positions = <13 23>;
            bindings = <_ LS(GRAVE)>;
            layers = <0>;
        };



        combo_r0c6c7 {
            key-positions = <6 7>;
            bindings = <_ N0>;
            layers = <0>;
        };
        combo_r0c7c8 {
            key-positions = <7 8>;
            bindings = <_ PLUS>;
            layers = <0>;
        };
        combo_r0c8c9 {
            key-positions = <8 9>;
            bindings = <_ N4>;
            layers = <0>;
        };

        combo_r1c6c7 {
            key-positions = <16 17>;
            bindings = <_ RBKT>;
            layers = <0>;
        };
        combo_r1c7c8 {
            key-positions = <17 18>;
            bindings = <_ EQUAL>;
            layers = <0>;
        };
        combo_r1c8c9 {
            key-positions = <18 19>;
            bindings = <_ N7>;
            layers = <0>;
        };

        combo_r2c6c7 {
            key-positions = <26 27>;
            bindings = <_ RBRC>;
            layers = <0>;
        };
        combo_r2c7c8 {
            key-positions = <27 28>;
            bindings = <_ N8>;
            layers = <0>;
        };
        combo_r2c8c9 {
            key-positions = <28 29>;
            bindings = <_ N5>;
            layers = <0>;
        };

        combo_c5r0r1 {
            key-positions = <5 15>;
            bindings = <_ N>;
            layers = <0>;
        };
        combo_c6r0r1 {
            key-positions = <6 16>;
            bindings = <_ RA(SEMI)>;
            layers = <0>;
        };
        combo_c7r0r1 {
            key-positions = <7 17>;
            bindings = <_ RA(I)>;
            layers = <0>;
        };
        combo_c8r0r1 {
            key-positions = <8 18>;
            bindings = <_ B>;
            layers = <0>;
        };

        combo_c6r1r2 {
            key-positions = <16 26>;
            bindings = <_ BSLH>;
            layers = <0>;
        };
        combo_c7r1r2 {
            key-positions = <17 27>;
            bindings = <_ LS(BSLH)>;
            layers = <0>;
        };
        combo_c8r1r2 {
            key-positions = <18 28>;
            bindings = <_ RA(BSLH)>;
            layers = <0>;
        };



        combo_navc4r0r1 {
            key-positions = <4 14>;
            bindings = <_ C_MUTE>;
            layers = <1>;
        };
        combo_navc5r0r1 {
            key-positions = <5 15>;
            bindings = <_ C_PLAY_PAUSE>;
            layers = <1>;
        };



        combo_numr0c0c1 {
            key-positions = <0 1>;
            bindings = <_ F7>;
            layers = <2>;
        };
        combo_numr0c1c2 {
            key-positions = <1 2>;
            bindings = <_ F8>;
            layers = <2>;
        };
        combo_numr0c2c3 {
            key-positions = <2 3>;
            bindings = <_ F9>;
            layers = <2>;
        };

        combo_numr1c0c1 {
            key-positions = <10 11>;
            bindings = <_ F4>;
            layers = <2>;
        };
        combo_numr1c1c2 {
            key-positions = <11 12>;
            bindings = <_ F5>;
            layers = <2>;
        };
        combo_numr1c2c3 {
            key-positions = <12 13>;
            bindings = <_ F6>;
            layers = <2>;
        };

        combo_numr2c0c1 {
            key-positions = <20 21>;
            bindings = <_ F1>;
            layers = <2>;
        };
        combo_numr2c1c2 {
            key-positions = <21 22>;
            bindings = <_ F2>;
            layers = <2>;
        };
        combo_numr2c2c3 {
            key-positions = <22 23>;
            bindings = <_ F3>;
            layers = <2>;
        };

        combo_numr0c6c7 {
            key-positions = <6 7>;
            bindings = <_ F10>;
            layers = <2>;
        };
        combo_numr0c7c8 {
            key-positions = <7 8>;
            bindings = <_ F11>;
            layers = <2>;
        };
        combo_numr0c8c9 {
            key-positions = <8 9>;
            bindings = <_ F12>;
            layers = <2>;
        };

        combo_numr2c6c7 {
            key-positions = <26 27>;
            bindings = <_ F13>;
            layers = <2>;
        };
        combo_numr2c7c8 {
            key-positions = <27 28>;
            bindings = <_ F14>;
            layers = <2>;
        };
        combo_numr2c8c9 {
            key-positions = <29 30>;
            bindings = <_ F15>;
            layers = <2>;
        };
    };
};

/ {
    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
    _ Q        _ W        _ E        _ R       _ T             _ Y        _ U        _ I        _ O       _ P
    _ A        _ S        _ D        _ F       _ G             _ H        _ J        _ K        _ L       _ SEMI
    _ Z        _ X        _ C        _ V       &lc NAV         &lc NUM    _ M        _ COMMA    _ DOT     _ FSLH
            >;
        };

        nav_layer {
            bindings = <
    ___        ___        _ PG_UP    _ PG_DN   _ C_VOL_UP      _ C_PREV   _ HOME     _ END      _ BSPC    _ DEL
    &sk LGUI   &sk LALT   &sk LCTRL  &sk LSHFT _ C_VOL_DN      _ C_NEXT   _ LEFT     _ DOWN     _ UP      _ RIGHT
    _ PSPC     _ NSPC     _ PSCRN    _ CAPS    ______          _ LSHFT    _ RET      _ TAB      _ ESC     _ KP_NUM
            >;
        };

        num_layer {
            bindings = <
    _ LBKT     _ KP_N7    _ KP_N8    _ KP_N9   _ N9            _ EQUAL    _ PLUS     _ MINUS    _ N8      _ BSLH
    _ KP_N0    _ KP_N4    _ KP_N5    _ KP_N6   _ N0            ___        &sk LSHFT  &sk LCTRL  &sk LALT  &sk LGUI
    _ RBKT     _ KP_N1    _ KP_N2    _ KP_N3   _ SPACE         ______     _ RET      _ TAB      _ ESC     _ KP_NUM
            >;
        };
    };
};
